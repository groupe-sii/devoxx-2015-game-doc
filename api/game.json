{
    "swagger": "2.0",
    "info": {
        "title": "Survival Game API",
        "version": "1.0.0"
    },
    "schemes": [
        "http"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/topic/game/create": {
            "post": {
                "summary": "Create a new game",
                "description": "Create a new game",
                "parameters": [],
                "responses": {
                    "/user/topic/game/created": {
                        "description": "[Single] When the game has been successfully created",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/user/topic/game/created": {
            "get": {
                "summary": "Notify the creation of a game",
                "description": "[Single] Notify the creation of a game",
                "parameters": [
                ],
                "responses": {
                    "default": {
                        "description": "The created game",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/select": {
            "post": {
                "summary": "Automatically selects a game",
                "description": "Automatically selects a game. If the game doesn't exist, a game will be automatically created.",
                "parameters": [],
                "responses": {
                    "/user/topic/game/selected": {
                        "description": "The selected game",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/user/topic/game/selected": {
            "get": {
                "summary": "Notify when the game is selected",
                "description": "[Single] Fired when the game is selected",
                "parameters": [
                ],
                "responses": {
                    "default": {
                        "description": "The selected game",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/info": {
            "post": {
                "summary": "Get information about a game",
                "description": "Get information about a game",
                "parameters": [],
                "responses": {
                    "/user/topic/game/{gameId}/info": {
                        "description": "The information about the game",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/user/topic/game/{gameId}/info": {
            "get": {
                "summary": "Get the information about the game",
                "description": "[Single] Fired when information about the game is asked",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The game information",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/join": {
            "post": {
                "summary": "Add a player to the game",
                "description": "Add a player to the game.<ul><li>If the player is already in the game, then an error is triggered on /user/queue/errors.</li><li>If the game is full (too many players), then an error is also triggered on /user/queue/errors.</li><li>If the player has joined the game, then the event /topic/game/{gameId}/player/added is triggered with player and position information. The /topic/game/{gameId}/player/joined is triggered with player, game and board information</li></ul>",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game the player wants to join to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "player",
                        "in": "body",
                        "description": "Information required to identify a player (name and avatar)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlayerInfo"
                        }
                    }
                ],
                "responses": {
                    "/topic/game/{gameId}/player/added": {
                        "description": "When the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    },
                    "/topic/game/{gameId}/player/joined": {
                        "description": "When the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    },
                    "/user/queue/errors": {
                        "description": "If the game is full (too many players) or if the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/leave": {
            "post": {
                "summary": "Remove the current player from the game",
                "description": "Remove the current player from the game. Once the player is removed, the events /topic/game/{gameId}/player/removed and /topic/game/{gameId}/player/left are triggered. If the player wasn't really in the game, then no event will be triggered",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game the player wants to leave",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "/topic/game/{gameId}/player/removed": {
                        "description": "When the player was on the board and has successfully left",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    },
                    "/topic/game/{gameId}/player/left": {
                        "description": "When the player was on the board and has successfully left",
                        "schema": {
                            "$ref": "#/definitions/PlayerAndGame"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/player/joined": {
            "get": {
                "summary": "Notify when a player has joined the game",
                "description": "Notify when a player has joined the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has joined the game and the whole game information (all players and board)",
                        "schema": {
                            "$ref": "#/definitions/PlayerAndGame"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/left": {
            "get": {
                "summary": "Notify when a player has joined the game",
                "description": "Notify when a player has joined the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has joined the game and the whole game information (all players and board)",
                        "schema": {
                            "$ref": "#/definitions/PlayerAndGame"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/died": {
            "get": {
                "summary": "Notify the death of a player",
                "description": "Fired when a player life is equal to or under 0",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player who died",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/revived": {
            "get": {
                "summary": "Notify the revive of a player",
                "description": "Fired when a player comes back to life",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that comes back to life",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/hit": {
            "get": {
                "summary": "Notify when a player is attacked",
                "description": "Notify when a player is attacked",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and damage value",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/healed": {
            "get": {
                "summary": "Notify when a player is healed",
                "description": "Notify when a player is healed",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and heal amount",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/states": {
            "get": {
                "summary": "Notify when any state applied to the player has been added or remove",
                "description": "Notify when any state applied to the player has been added or remove",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and the state changes",
                        "schema": {
                            "$ref": "#/definitions/PlayerStateUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/max": {
            "get": {
                "summary": "Notify the player his max life is updated",
                "description": "Notify the player his max life is updated",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and the amount",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/player/move/up": {
            "post": {
                "summary": "Move the current player one cell up",
                "description": "Moves the current player one cell up. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/player/move/down": {
            "post": {
                "summary": "Move the current player one cell down",
                "description": "Moves the current player one cell down. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/player/move/left": {
            "post": {
                "summary": "Move the current player one cell left",
                "description": "Moves the current player one cell left. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/player/move/right": {
            "post": {
                "summary": "Move the current player one cell right",
                "description": "Moves the current player one cell right. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/action": {
            "post": {
                "summary": "execute an action (change position, update life, change states, move image)",
                "description": "<p>Execute an action. Please see specific actions to send: ChangePosition, ChangeStates, MoveImage, UpdateCurrentLife, UpdateMaxLife.</p><ul><li>If the action is ChangePosition, then the event /topic/game/{gameId}/player/moved is triggered with player and position information.</li><li>If the action is ChangeStates, then the event /topic/game/{gameId}/player/states is triggered with player and the list of changes.</li><li>If the action is MoveImage, then the event /topic/game/{gameId}/action/image/moved indicating the image that moved and the position before and after.</li><li>If the action is UpdateCurrentLife or UpdateMaxLife, then one of the following events is triggered according to the life change: <ul><li>/topic/game/{gameId}/player/died</li><li>/topic/game/{gameId}/player/revived</li><li>/topic/game/{gameId}/player/hit</li><li>/topic/game/{gameId}/player/healed.</li></ul></li></ul>",
                "parameters": [
                    {
                        "name": "change position",
                        "in": "body",
                        "description": "Change position of all players that are currently on the provided cell to another cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangePosition"
                        }
                    },
                    {
                        "name": "change states",
                        "in": "body",
                        "description": "Change states of all players that are currently on the target cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeStates"
                        }
                    },
                    {
                        "name": "move image",
                        "in": "body",
                        "description": "Move an image on the board",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    },
                    {
                        "name": "update life",
                        "in": "body",
                        "description": "Update the current life of all players that are currently on the target cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCurrentLife"
                        }
                    },
                    {
                        "name": "update max life",
                        "in": "body",
                        "description": "Update the maximum life of all players that are currently on the target cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateMaxLife"
                        }
                    }
                ],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the ChangePosition action has moved at least one player",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    },
                    "/topic/game/{gameId}/player/states": {
                        "description": "When the ChangeStates action has updated at least one state on one player",
                        "schema": {
                            "$ref": "#/definitions/PlayerStateUpdate"
                        }
                    },
                    "/topic/game/{gameId}/action/image/moved": {
                        "description": "When the MoveImage action has moved an image on the board",
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    },
                    "/topic/game/{gameId}/player/died": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and his life is now under 0",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/revived": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and his life was 0 and now its life is over 0",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/hit": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and amount was negative",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/healed": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and amount was positive",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/action/image/moved": {
            "get": {
                "summary": "Notify when an image has moved",
                "description": "Notify when an image has moved",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The executed action. It contains the information about the image that has moved and where the image was before the move (start) and where the image is now (end)",
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/moved": {
            "get": {
                "summary": "Notify when a player has moved",
                "description": "Notify when a player has moved",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that moved, the position before the move (oldCell) and the current position (newCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/added": {
            "get": {
                "summary": "Notify when a player is added to the board",
                "description": "Notify when a player is added to the board",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has joined the game and the position where he has been added (newCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/removed": {
            "get": {
                "summary": "Notify when a player is removed from board",
                "description": "Notify when a player is removed from board",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has quitted the game and the position where he was (oldCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/message/error": {
            "get": {
                "summary": "Broadcast notification when an error occurs in the game",
                "description": "Notify when an error occurs in the game. The error can contain developer information that is useful for identifying quickly who created the problem and therefore helps to locate the error",
                "responses": {
                    "default": {
                        "description": "The error (message, cause and eventually the developer)",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/message": {
            "get": {
                "summary": "Notify when a message should be displayed on the client",
                "description": "Notify when a message should be displayed on the client",
                "responses": {
                    "default": {
                        "description": "The message and the level",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/user/queue/errors": {
            "get": {
                "summary": "Notify when an error occurs due to the previous request you have done",
                "description": "Notify when an error occurs due to the previous request you have done",
                "responses": {
                    "default": {
                        "description": "The error (message, cause and eventually the developer)",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
            	"tags": ["private"]
            }
        }
    },
    "definitions": {
        "Cell": {
            "properties": {
                "x": {
                    "type": "integer",
                    "description": "The x position"
                },
                "y": {
                    "type": "integer",
                    "description": "The y position"
                }
            },
            "type": "object",
            "description": "A square on the board"
        },
        "Life": {
            "properties": {
                "current": {
                    "type": "integer"
                },
                "max": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PlayerInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique name of the player"
                },
                "avatar": {
                    "type": "string",
                    "description": "The name of a local image that will be displayed in the game for the player. Default value to 'default'"
                }
            },
            "type": "object"
        },
        "Player": {
            "description": "The general information about one player. A player is either a real player (Wizard) or an enemy controlled by the server (Enemy)",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the player: either a Wizard or an Enemy"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier representing a specific player"
                },
                "life": {
                    "$ref": "#/definitions/Life",
                    "description": "Life of the player."
                },
                "playerInfo": {
                    "$ref": "#/definitions/PlayerInfo",
                    "description": "Information about the player (name and avatar)"
                },
                "states": {
                    "type": "string",
                    "items": {
                        "type": "string"
                    },
                    "description": "States affecting the player."
                }
            },
            "type": "object"
        },
        "PlayerMoved": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The action emitter"
                },
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "A player moving event"
        },
        "PlayerLifeUpdate": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player who life changed"
                },
                "amount": {
                    "type": "integer",
                    "description": "The life amount (positive means player was healed, negative means the player was hit)"
                }
            },
            "type": "object",
            "description": "A player moving event"
        },
        "StateChange": {
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The name of the state"
                },
                "change": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "ADD",
                            "REMOVE"
                        ]
                    },
                    "description": "The list of modifications applied to the player states"
                }
            },
            "type": "object",
            "description": "Player state changes response"
        },
        "PlayerStateUpdate": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player who states are changed"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateChange"
                    },
                    "description": "The list of modifications applied to the player states"
                }
            },
            "type": "object",
            "description": "Player state changes response"
        },
        "MoveImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .MoveImage"
            	},
                "name": {
                    "type": "string",
                    "description": "Image name to move. The name of the image represents the name of the local file to move."
                },
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "An image moving action"
        },
        "Action": {
            "description": "any of ChangePosition, MoveImage, UpdateCurrentLife, UpdateMaxLife, ChangeStates",
            "type": "object",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the action: either '.ChangePosition', '.MoveImage', '.UpdateCurrentLife', '.UpdateMaxLife', '.ChangeStates'"
                }
            }
        },
        "ChangePosition": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .ChangePosition"
            	},
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "Change position of all players that are on the targeted cell (start) to another cell (end)"
        },
        "ChangeStates": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .ChangeStates"
            	},
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell to target"
                },
                "stateChanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateChange"
                    },
                    "description": "A list of changes to apply. Each change provide the name of the state and the action to apply on the provided state (add or remove)"
                }
            },
            "type": "object",
            "description": "Change states of all players that are on the targeted cell"
        },
        "UpdateCurrentLife": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UpdateCurrentLife"
            	},
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell to target: the location of the game board cell where increment value should be applied"
                },
                "increment": {
                    "type": "integer",
                    "description": "The increment value to apply on the location. If increment is positive, then current life will be incremented. If increment is negative, then current life will be decremented."
                }
            },
            "type": "object",
            "description": "Change life of all players that are on the targeted cell"
        },
        "UpdateMaxLife": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UpdateMaxLife"
            	},
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell to target: the location of the game board cell where increment value should be applied"
                },
                "increment": {
                    "type": "integer",
                    "description": "The increment value to apply on the location. If increment is positive, then maximum life will be incremented. If increment is negative, then maximum life will be decremented."
                }
            },
            "type": "object",
            "description": "Change maximum life of all players that are on the targeted cell"
        },
        "Level": {
            "description": "one of DEBUG, INFO, WARNING",
            "type": "string",
            "properties": {},
            "enum": [
                "DEBUG",
                "INFO",
                "WARNING"
            ]
        },
        "Message": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "level": {
                    "$ref": "#/definitions/Level"
                }
            },
            "type": "object"
        },
        "Developer": {
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Error": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "cause": {
                    "type": "string"
                },
                "developer": {
                    "$ref": "#/definitions/Developer"
                }
            },
            "type": "object"
        },
        "Board": {
            "properties": {
                "width": {
                    "type": "integer",
                    "description": "The width of the board"
                },
                "height": {
                    "type": "integer",
                    "description": "The height of the board"
                }
            },
            "type": "object",
            "description": "The board information"
        },
        "Game": {
            "properties": {
            	"id": {
            		"type": "string",
            		"description": "The identifier of the game"
            	},
                "players": {
                	"type": "array",
                	"items": {
	                    "$ref": "#/definitions/Player",
	                    "description": "The list of players in the game"
	                }
                },
                "board": {
                    "$ref": "#/definitions/Board",
                    "description": "The board information (player positions)"
                }
            },
            "type": "object",
            "description": "The game information (board and players)"
        },
        "PlayerAndGame": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player"
                },
                "game": {
                    "$ref": "#/definitions/Game",
                    "description": "The game information"
                }
            },
            "type": "object",
            "description": "The player and the game information"
        }
    }
}
