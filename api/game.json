{
    "swagger": "2.0",
    "info": {
        "title": "Survival Game API",
        "version": "1.0.0"
    },
    "schemes": [
        "http"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/topic/game/create": {
            "post": {
                "summary": "Create a new game",
                "description": "Create a new game",
                "parameters": [],
                "responses": {
                    "/user/topic/game/created": {
                        "description": "Notify the user that made the request that the game has been successfully created",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/user/topic/game/created": {
            "get": {
                "summary": "Notify the user about the creation of a game",
                "description": "Notify the user that made the request that the game is created",
                "parameters": [
                ],
                "responses": {
                    "default": {
                        "description": "The created game",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/select": {
            "post": {
                "summary": "Automatically selects a game",
                "description": "Automatically selects a game. If the game doesn't exist or all games are full, then a game will be automatically created.",
                "parameters": [],
                "responses": {
                    "/user/topic/game/selected": {
                        "description": "Notify the user that made the request that a game has been selected",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/user/topic/game/selected": {
            "get": {
                "summary": "Notify the user when the game is selected",
                "description": "Notify the user that made the request that a game has been selected",
                "parameters": [
                ],
                "responses": {
                    "default": {
                        "description": "Notify the user that made the request that a game has been selected",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/info": {
            "post": {
                "summary": "Get information about a game",
                "description": "Get information about a game",
                "parameters": [],
                "responses": {
                    "/user/topic/game/info": {
                        "description": "Notify the user that made the request with the information about the game",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/user/topic/game/info": {
            "get": {
                "summary": "Receive game information",
                "description": "Notify the user that made the request with the information about the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The game information",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/join": {
            "post": {
                "summary": "Add a player to the game",
                "description": "Add a player to the game.<ul><li>If the player is already in the game, then an error is triggered on /user/topic/game/errors.</li><li>If the game is full (too many players), then an error is also triggered on /user/topic/game/errors.</li><li>If the player has joined the game, then <ul><li>The event /topic/game/{gameId}/player/added is triggered with player and position information.</li><li>The /topic/game/{gameId}/player/joined is triggered with player, game and board information.</li><li>The event /user/topic/game/joined is triggered to the user that made the request to indicate that his request has been successfully taken into account</li></ul></li></ul>",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game the player wants to join to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "player",
                        "in": "body",
                        "description": "Information required to identify a player (name and avatar)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlayerInfo"
                        }
                    }
                ],
                "responses": {
                    "/topic/game/{gameId}/player/added": {
                        "description": "When the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    },
                    "/topic/game/{gameId}/player/joined": {
                        "description": "When the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    },
                    "/user/topic/game/joined": {
                        "description": "Notify the user that made the request that the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    },
                    "/user/topic/game/errors": {
                        "description": "Notify the user that made the request that if the game is full (too many players) or if the player has joined the game",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/leave": {
            "post": {
                "summary": "Remove the current player from the game",
                "description": "Remove the current player from the game. Once the player is removed, the events /topic/game/{gameId}/player/removed and /topic/game/{gameId}/player/left are triggered. If the player wasn't really in the game, then no event will be triggered",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game the player wants to leave",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "/topic/game/{gameId}/player/removed": {
                        "description": "When the player was on the board and has successfully left",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    },
                    "/topic/game/{gameId}/player/left": {
                        "description": "When the player was on the board and has successfully left",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/player/joined": {
            "get": {
                "summary": "Notify when a player has joined the game",
                "description": "Notify when a player has joined the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has joined the game",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/user/topic/game/joined": {
            "get": {
                "summary": "Notify the user that joined the game",
                "description": "Notify the user that made the request that he joined the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has joined the game and the whole game information (all players and board)",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/player/left": {
            "get": {
                "summary": "Notify when a player has left the game",
                "description": "Notify when a player has left the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has left the game",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
       "/user/topic/game/left": {
            "get": {
                "summary": "Notify the user that left the game",
                "description": "Notify the user that made the request that he left the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has left the game",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/started": {
            "get": {
                "summary": "Notify when the game has started",
                "description": "Fired just after one player has joined the game",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The game that started",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/stopped": {
            "get": {
                "summary": "Notify when the game has stopped",
                "description": "Fired just after the last player on the game has left it",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The game that stopped",
                        "schema": {
                            "$ref": "#/definitions/Game"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/{gameId}/player/died": {
            "get": {
                "summary": "Notify the death of a player",
                "description": "Fired when a player life is equal to or under 0",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player who died",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/revived": {
            "get": {
                "summary": "Notify the revive of a player",
                "description": "Fired when a player comes back to life",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that comes back to life",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/hit": {
            "get": {
                "summary": "Notify when a player is attacked",
                "description": "Notify when a player is attacked",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and damage value",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/healed": {
            "get": {
                "summary": "Notify when a player is healed",
                "description": "Notify when a player is healed",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and heal amount",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/states": {
            "get": {
                "summary": "Notify when any state applied to the player has been added or remove",
                "description": "Notify when any state applied to the player has been added or remove",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and the state changes",
                        "schema": {
                            "$ref": "#/definitions/PlayerStateUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/life/max": {
            "get": {
                "summary": "Notify the player his max life is updated",
                "description": "Notify the player his max life is updated",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player and the amount",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/player/move/up": {
            "post": {
                "summary": "Move the current player one cell up",
                "description": "Moves the current player one cell up. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/player/move/down": {
            "post": {
                "summary": "Move the current player one cell down",
                "description": "Moves the current player one cell down. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/player/move/left": {
            "post": {
                "summary": "Move the current player one cell left",
                "description": "Moves the current player one cell left. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/player/move/right": {
            "post": {
                "summary": "Move the current player one cell right",
                "description": "Moves the current player one cell right. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the player has moved",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/action": {
            "post": {
                "summary": "execute an action (change position, update life, change states, move image)",
                "description": "<p>Execute an action. Please see specific actions to send: UpdatePosition, UpdateStates, AddImage, MoveImage, RemoveImage, UpdateCurrentLife, UpdateMaxLife, StartAnimation, StopAnimation.</p><ul><li>If the action is UpdatePosition, then the event /topic/game/{gameId}/player/moved is triggered with player and position information.</li><li>If the action is UpdateStates, then the event /topic/game/{gameId}/player/states is triggered with player and the list of changes.</li><li>If the action is AddImage, then the event /topic/game/{gameId}/image/add indicating that an image has been added on the board with its position.</li><li>If the action is MoveImage, then the event /topic/game/{gameId}/image/moved indicating the image that moved and the position before and after.</li><li>If the action is RemoveImage, then the event /topic/game/{gameId}/image/removed indicating an image has been removed from the board with its position before being removed.</li><li>If the action is StartAnimation, then the event /topic/game/{gameId}/animation/started indicating that an animation should start.</li><li>If the action is StopAnimation, then the event /topic/game/{gameId}/animation/stop indicating that an image should stop.</li><li>If the action is UpdateCurrentLife or UpdateMaxLife, then one of the following events is triggered according to the life change: <ul><li>/topic/game/{gameId}/player/died</li><li>/topic/game/{gameId}/player/revived</li><li>/topic/game/{gameId}/player/hit</li><li>/topic/game/{gameId}/player/healed.</li><li>/topic/game/{gameId}/player/life/max.</li></ul></li></ul>",
                "parameters": [
                    {
                        "name": "change position",
                        "in": "body",
                        "description": "Change position of all players that are currently on the provided cell to another cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePosition"
                        }
                    },
                    {
                        "name": "change states",
                        "in": "body",
                        "description": "Change states of all players that are currently on the target cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateStates"
                        }
                    },
                    {
                        "name": "update life",
                        "in": "body",
                        "description": "Update the current life of all players that are currently on the target cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateCurrentLife"
                        }
                    },
                    {
                        "name": "update max life",
                        "in": "body",
                        "description": "Update the maximum life of all players that are currently on the target cell",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateMaxLife"
                        }
                    },
                    {
                        "name": "add an image",
                        "in": "body",
                        "description": "Add an image on the board",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddImage"
                        }
                    },
                    {
                        "name": "move an image",
                        "in": "body",
                        "description": "Move an image on the board",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    },
                    {
                        "name": "remove an image",
                        "in": "body",
                        "description": "Remove an image from the board",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RemoveImage"
                        }
                    },
                    {
                        "name": "start an animation",
                        "in": "body",
                        "description": "Start an animation that is previously defined on the client",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StartAnimation"
                        }
                    },
                    {
                        "name": "stop an animation",
                        "in": "body",
                        "description": "Stop an animation",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StopAnimation"
                        }
                    }
                ],
                "responses": {
                    "/topic/game/{gameId}/player/moved": {
                        "description": "When the UpdatePosition action has moved at least one player",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    },
                    "/topic/game/{gameId}/player/states": {
                        "description": "When the UpdateStates action has updated at least one state on one player",
                        "schema": {
                            "$ref": "#/definitions/PlayerStateUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/died": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and his life is now under 0",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/revived": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and his life was 0 and now its life is over 0",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/hit": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and amount was negative",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/healed": {
                        "description": "When UpdateCurrentLife or UpdateMaxLife has changed life of at least one player and amount was positive",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/player/life/max": {
                        "description": "When UpdateMaxLife has changed the maximum points of life of at least one player",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    },
                    "/topic/game/{gameId}/image/added": {
                        "description": "When the AddImage action has added an image on the board",
                        "schema": {
                            "$ref": "#/definitions/AddImage"
                        }
                    },
                    "/topic/game/{gameId}/image/moved": {
                        "description": "When the MoveImage action has moved an image on the board",
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    },
                    "/topic/game/{gameId}/image/removed": {
                        "description": "When the RemoveImage action has removed an image from the board",
                        "schema": {
                            "$ref": "#/definitions/RemoveImage"
                        }
                    },
                    "/topic/game/{gameId}/animation/started": {
                        "description": "When the StartAnimation has been executed",
                        "schema": {
                            "$ref": "#/definitions/StartAnimation"
                        }
                    },
                    "/topic/game/{gameId}/animation/stopped": {
                        "description": "When the StopAnimation has been executed",
                        "schema": {
                            "$ref": "#/definitions/StopAnimation"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/image/added": {
            "get": {
                "summary": "Notify when an image has been added",
                "description": "Notify when an image has been added on the board",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The executed action. It contains the information about the image that has been added and where the image is placed on the board",
                        "schema": {
                            "$ref": "#/definitions/AddImage"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/image/moved": {
            "get": {
                "summary": "Notify when an image has moved",
                "description": "Notify when an image has moved",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The executed action. It contains the information about the image that has moved and where the image was before the move (start) and where the image is now (end)",
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/image/removed": {
            "get": {
                "summary": "Notify when an image has been removed",
                "description": "Notify when an image has been removed from the board",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The executed action. It contains the information about the image that has been removed and where the image was before being removed",
                        "schema": {
                            "$ref": "#/definitions/RemoveImage"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/moved": {
            "get": {
                "summary": "Notify when a player has moved",
                "description": "Notify when a player has moved",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that moved, the position before the move (oldCell) and the current position (newCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/added": {
            "get": {
                "summary": "Notify when a player is added to the board",
                "description": "Notify when a player is added to the board",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has joined the game and the position where he has been added (newCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/player/removed": {
            "get": {
                "summary": "Notify when a player is removed from board",
                "description": "Notify when a player is removed from board",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The player that has quitted the game and the position where he was (oldCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/message/error": {
            "get": {
                "summary": "Broadcast notification when an error occurs in the game",
                "description": "Notify when an error occurs in the game. The error can contain developer information that is useful for identifying quickly who created the problem and therefore helps to locate the error",
                "responses": {
                    "default": {
                        "description": "The error (message, cause and eventually the developer)",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/topic/game/message": {
            "get": {
                "summary": "Notify when a message should be displayed on the client",
                "description": "Notify when a message should be displayed on the client",
                "responses": {
                    "default": {
                        "description": "The message and the level",
                        "schema": {
                            "$ref": "#/definitions/GameMessage"
                        }
                    }
                },
            	"tags": ["private"]
            }
        },
        "/user/topic/game/errors": {
            "get": {
                "summary": "Notify when an error occurs due to the previous request you have done",
                "description": "Notify when an error occurs due to the previous request you have done",
                "responses": {
                    "default": {
                        "description": "The error (message, cause and eventually the developer)",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/animation/all": {
            "post": {
                "summary": "Get the list of server animations",
                "description": "Retrieve the whole list of available animation descriptions handled by the server (the animation handled by the client are not visible here). The name of the animation may be used directly in css classes or used to be manually triggered by sending an action of type StartAnimation.",
                "parameters": [
                ],
                "responses": {
                    "/user/topic/game/animation/all": {
                        "description": "Provide the animation list",
                        "schema": {
                        	"type": "array",
                        	"items": {
                            	"$ref": "#/definitions/Animation"
                            }
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/animation/started": {
            "get": {
                "summary": "Notify when an animation has started",
                "description": "This event is broadcasted in order to indicate to the client implementation that an animation must start",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The information about the animation to start. The name of the animation is used to identify the animation to start. The animation must be previously created. The other parameters allow to override the predefined animation behavior (duration, count, delay...)",
                        "schema": {
                            "$ref": "#/definitions/StartAnimation"
                        }
                    }
                },
            	"tags": ["public"]
            }
        },
        "/topic/game/{gameId}/animation/stopped": {
            "get": {
                "summary": "Notify when an animation has stopped",
                "description": "This event is broadcasted in order to indicate to the client implementation that an animation must stop",
                "parameters": [
                    {
                        "name": "gameId",
                        "in": "path",
                        "description": "The identifier of the game",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "default": {
                        "description": "The information about the action (just contains the name of the animation to stop)",
                        "schema": {
                            "$ref": "#/definitions/StopAnimation"
                        }
                    }
                },
            	"tags": ["public"]
            }
        }
    },
    "definitions": {
        "Cell": {
            "properties": {
                "x": {
                    "type": "integer",
                    "description": "The x position"
                },
                "y": {
                    "type": "integer",
                    "description": "The y position"
                }
            },
            "type": "object",
            "description": "A square on the board"
        },
        "Image": {
            "description": "Represents an image usable by the game. Can be either ClientImage (image that is stored in the client), Base64ServerImage (image that is stored on the server and base64 encoded) or UriImage (image that is stored on the server and accessible through an URL). An image can also represents a sprite, see Sprite for more information",
            "type": "object",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the image: either '.ClientImage', '.Base64ServerImage', '.UriImage' or any of sprite class (see sprite for more information)"
                }
            }
        },
        "ClientImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .ClientImage"
            	},
                "id": {
                    "type": "string",
                    "description": "The unique id of the image"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the image without the extension. The image must be stored on the client side. The image is relative to the provided folder or default folder"
                },
                "folder": {
                    "type": "string",
                    "description": "The folder that contains the image. The folder must exists on the client side"
                }
            },
            "type": "object",
            "description": "References an image that is stored on the client side"
        },
        "Base64ServerImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .Base64ServerImage"
            	},
                "id": {
                    "type": "string",
                    "description": "The unique id of the image"
                },
                "mimetype": {
                    "type": "string",
                    "description": "The mimetype of the image"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the image (base64 encoded)"
                }
            },
            "type": "object",
            "description": "References an image that is stored on the server side. The image is serialized into base64 in order to be usable by the client."
        },
        "UriImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UriImage"
            	},
                "uri": {
                    "type": "string",
                    "description": "The url of the image"
                }
            },
            "type": "object",
            "description": "References an image that is stored on the server side. The image is accessible through the provided URL."
        },
        "Sprite": {
            "description": "Represents an image that is a composition of many other images",
            "type": "object",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the image: either '.Base64Sprite' or '.UriSprite'"
                }
            }
        },
        "UriSprite": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UriSprite"
            	},
                "id": {
                    "type": "string",
                    "description": "The unique id of the image"
                },
                "image": {
                    "type": "object",
                    "$ref": "#/definitions/ServerImage",
                    "description": "The server image that is composed of several sub images"
                },
                "width": {
                    "type": "integer",
                    "description": "The width of the sprite image"
                },
                "height": {
                    "type": "integer",
                    "description": "The height of the sprite image"
                },
                "frameWidth": {
                    "type": "integer",
                    "description": "The width of one image contained in the sprite"
                },
                "frameHeight": {
                    "type": "integer",
                    "description": "The height of one image contained in the sprite"
                }
            },
            "type": "object",
            "description": "References a sprite (combination of several sub images). The sprite image is generated in memory and base64 encoded"
        },
        "Base64Sprite": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .Base64Sprite"
            	},
                "id": {
                    "type": "string",
                    "description": "The unique id of the image"
                },
                "image": {
                    "type": "object",
                    "$ref": "#/definitions/ServerImage",
                    "description": "The server image that is composed of several sub images"
                },
                "width": {
                    "type": "integer",
                    "description": "The width of the sprite image"
                },
                "height": {
                    "type": "integer",
                    "description": "The height of the sprite image"
                },
                "frameWidth": {
                    "type": "integer",
                    "description": "The width of one image contained in the sprite"
                },
                "frameHeight": {
                    "type": "integer",
                    "description": "The height of one image contained in the sprite"
                }
            },
            "type": "object",
            "description": "References a sprite (combination of several sub images). The sprite image is generated in memory and base64 encoded"
        },
        "Life": {
            "properties": {
                "current": {
                    "type": "integer"
                },
                "max": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PlayerInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique name of the player"
                },
                "avatar": {
                    "$ref": "#/definitions/Image",
                    "description": "The image that will be displayed in the game for the player"
                }
            },
            "type": "object"
        },
        "Player": {
            "description": "The general information about one player. A player is either a real player (Wizard) or an enemy controlled by the server (Enemy)",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the player: either a wizard ('.Wizard') or an enemy ('.Enemy')"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier representing a specific player"
                },
                "life": {
                    "$ref": "#/definitions/Life",
                    "description": "Life of the player."
                },
                "playerInfo": {
                    "$ref": "#/definitions/PlayerInfo",
                    "description": "Information about the player (name and avatar)"
                },
                "playerStates": {
                    "$ref": "#/definitions/PlayerStates",
                    "description": "The list of states affecting the player."
                }
            },
            "type": "object"
        },
        "PlayerStates": {
            "properties": {
                "states": {
                    "type": "array",
                    "items": {
                    	"type": "string"
                    },
                    "description": "The list of states"
                }
            },
            "type": "object",
            "description": "Represents the states that are applied on a player"
        },
        "PlayerMoved": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The action emitter"
                },
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "A player moving event"
        },
        "PlayerLifeUpdate": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player who life changed"
                },
                "amount": {
                    "type": "integer",
                    "description": "The life amount (positive means player was healed, negative means the player was hit)"
                }
            },
            "type": "object",
            "description": "A player moving event"
        },
        "StateChange": {
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The name of the state"
                },
                "change": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "ADD",
                            "REMOVE"
                        ]
                    },
                    "description": "The list of modifications applied to the player states"
                }
            },
            "type": "object",
            "description": "Player state changes response"
        },
        "PlayerStateUpdate": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player who states are changed"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateChange"
                    },
                    "description": "The list of modifications applied to the player states"
                }
            },
            "type": "object",
            "description": "Player state changes response"
        },
        "AddImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .AddImage"
            	},
                "image": {
                    "$ref": "#/definitions/Image",
                    "description": "Image to add"
                },
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell where to place the image"
                }
            },
            "type": "object",
            "description": "An image adding action"
        },
        "MoveImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .MoveImage"
            	},
                "image": {
                    "$ref": "#/definitions/Image",
                    "description": "Image to move"
                },
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "An image moving action"
        },
        "RemoveImage": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .RemoveImage"
            	},
                "image": {
                    "$ref": "#/definitions/Image",
                    "description": "Image to remove"
                },
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell where the image before being removed"
                }
            },
            "type": "object",
            "description": "An image removing action"
        },
        "Action": {
            "description": "any of UpdatePosition, AddImage, MoveImage, RemoveImage, UpdateCurrentLife, UpdateMaxLife, UpdateStates",
            "type": "object",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the action: either '.UpdatePosition', '.AddImage', '.MoveImage', '.RemoveImage', '.UpdateCurrentLife', '.UpdateMaxLife', '.UpdateStates'"
                }
            }
        },
        "UpdatePosition": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UpdatePosition"
            	},
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "Change position of all players that are on the targeted cell (start) to another cell (end)"
        },
        "UpdateStates": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UpdateStates"
            	},
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell to target"
                },
                "stateChanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateChange"
                    },
                    "description": "A list of changes to apply. Each change provide the name of the state and the action to apply on the provided state (add or remove)"
                }
            },
            "type": "object",
            "description": "Change states of all players that are on the targeted cell"
        },
        "UpdateCurrentLife": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UpdateCurrentLife"
            	},
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell to target: the location of the game board cell where increment value should be applied"
                },
                "increment": {
                    "type": "integer",
                    "description": "The increment value to apply on the location. If increment is positive, then current life will be incremented. If increment is negative, then current life will be decremented."
                }
            },
            "type": "object",
            "description": "Change life of all players that are on the targeted cell"
        },
        "UpdateMaxLife": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .UpdateMaxLife"
            	},
                "cell": {
                    "$ref": "#/definitions/Cell",
                    "description": "The cell to target: the location of the game board cell where increment value should be applied"
                },
                "increment": {
                    "type": "integer",
                    "description": "The increment value to apply on the location. If increment is positive, then maximum life will be incremented. If increment is negative, then maximum life will be decremented."
                }
            },
            "type": "object",
            "description": "Change maximum life of all players that are on the targeted cell"
        },
        "StopAnimation": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .StopAnimation"
            	},
                "name": {
                    "type": "string",
                    "description": "The name of the animation to stop"
                }
            },
            "type": "object",
            "description": "Stop an animation identified by the provided name"
        },
        "StartAnimation": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .StartAnimation"
            	},
                "options": {
                    "$ref": "#/definitions/AnimationOptions",
                    "description": "Override the default options of the animation (delay, number of execution, direction...)"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the animation to start"
                },
                "duration": {
                    "type": "integer",
                    "description": "Override the default duration of the animation (value is in milliseconds)"
                }
            },
            "type": "object",
            "description": "Manually starts an animation previously defined either on the server side or the client side. The animation is identified by the name. The animation parameters can be overrided by this action (just for this execution)"
        },
        "Level": {
            "description": "one of DEBUG, INFO, WARNING",
            "type": "string",
            "properties": {},
            "enum": [
                "DEBUG",
                "INFO",
                "WARNING"
            ]
        },
        "GameMessage": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "level": {
                    "$ref": "#/definitions/Level"
                }
            },
            "type": "object"
        },
        "Developer": {
            "properties": {
                "nickname": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Error": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "cause": {
                    "type": "string"
                },
                "developer": {
                    "$ref": "#/definitions/Developer"
                }
            },
            "type": "object"
        },
        "Board": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique id of the board"
                },
                "width": {
                    "type": "integer",
                    "description": "The width of the board"
                },
                "height": {
                    "type": "integer",
                    "description": "The height of the board"
                }
            },
            "type": "object",
            "description": "The board information"
        },
        "Game": {
            "properties": {
            	"id": {
            		"type": "string",
            		"description": "The identifier of the game"
            	},
            	"started": {
            		"type": "boolean",
            		"description": "Indicates if the game is started or not"
            	},
            	"full": {
            		"type": "boolean",
            		"description": "Indicates if the game is full or not"
            	},
                "players": {
                	"type": "array",
                	"items": {
	                    "$ref": "#/definitions/Player",
	                    "description": "The list of players in the game"
	                }
                },
                "board": {
                    "$ref": "#/definitions/Board",
                    "description": "The board information (player positions)"
                }
            },
            "type": "object",
            "description": "The game information (board and players)"
        },
        "PlayerAndGame": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player"
                },
                "game": {
                    "$ref": "#/definitions/Game",
                    "description": "The game information"
                }
            },
            "type": "object",
            "description": "The player and the game information"
        },
        "Animation": {
            "description": "Describe an animation. This is the interface, see any of following implementations: ClientAnimation, PropertiesAnimation, SpriteAnimation",
            "type": "object",
            "properties": {
                "@c": {
                    "type": "string",
                    "description": "The type of the action: either '.ClientAnimation', '.PropertiesAnimation', '.SpriteAnimation'"
                }
            }
        },
        "ClientAnimation": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .ClientAnimation"
            	},
                "options": {
                    "$ref": "#/definitions/AnimationOptions",
                    "description": "The animation options (delay, number of execution, direction...)"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the animation"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the animation to start"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the animation (value is in milliseconds)"
                }
            },
            "type": "object",
            "description": "Animation that is defined on the client side"
        },
        "PropertiesAnimation": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .PropertiesAnimation"
            	},
                "options": {
                    "$ref": "#/definitions/AnimationOptions",
                    "description": "The animation options (delay, number of execution, direction...)"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the animation"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the animation to start"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the animation (value is in milliseconds)"
                },
                "frames": {
                	"type": "array",
                	"items": {
                		"$ref": "#/definitions/Frame",
                		"description": "The list of frames that compose the animation"
                	}
                }
            },
            "type": "object",
            "description": "Declare an animation composed with provided frames. These frames are useful for indicating to the client how to run it."
        },
        "SpriteAnimation": {
            "properties": {
            	"@c": {
            		"type": "string",
            		"description": "MUST be .SpriteAnimation"
            	},
                "options": {
                    "$ref": "#/definitions/AnimationOptions",
                    "description": "The animation options (delay, number of execution, direction...)"
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the animation"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the animation to start"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the animation (value is in milliseconds)"
                },
                "sprite": {
            		"$ref": "#/definitions/Sprite",
            		"description": "The sprite image to animate"
                }
            },
            "type": "object",
            "description": "Generates an animation based on the provided sprite image. Each frame represents one image of the sprite. The animation can automatically generates linear percentage for frames. But if steps are provided, the animation is no more linear and let you provide manually the steps."
        },
        "Frame": {
            "properties": {
                "properties": {
                	"type": "object",
                	"additionalProperties": {
                		"type": "object"
                	},
                	"desccription": "The map of properties to update"
                },
                "percentage": {
                    "type": "number",
                    "description": "The unique identifier for the animation"
                }
            },
            "type": "object",
            "description": "Represents one step of an animation"
        },
        "AnimationOptions": {
            "properties": {
                "count": {
                	"type": "integer",
                	"description": "The number of times that the animation should run: <ul><li>1 means 1 execution (no repeat)</li><li>2 and over means the exact number of execution</li><li>0 means no execution</li><li>-1 means repeat forever (animation never stops)</li></ul>"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                    	"NORMAL",
                    	"REVERSE",
                    	"ALTERNATE",
                    	"ALTERNATE_REVERSE"
                    ],
                    "description": "The direction of the animation"
                },
                "delay": {
                	"type": "integer",
                	"description": "The time to wait before starting the animation (in milliseconds)"
                }
            },
            "type": "object",
            "description": "Represents one step of an animation"
        }
    }
}
