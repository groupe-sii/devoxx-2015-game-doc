{
    "swagger": "2.0",
    "info": {
        "title": "Survival Game API",
        "version": "1.0.0"
    },
    "schemes": [
        "http"
    ],
    "basePath": "/",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/topic/game/player/died": {
            "get": {
                "summary": "Notify the death of a player. Fired when a player life is equal to or under 0",
                "responses": {
                    "default": {
                        "description": "The player who died",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                }
            }
        },
        "/topic/game/player/revived": {
            "get": {
                "summary": "Notify the revive of a player. Fired when a player comes back to life",
                "responses": {
                    "default": {
                        "description": "The player that comes back to life",
                        "schema": {
                            "$ref": "#/definitions/Player"
                        }
                    }
                }
            }
        },
        "/topic/game/player/hit": {
            "get": {
                "summary": "Notify when a player is attacked",
                "responses": {
                    "default": {
                        "description": "The player and damage value",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                }
            }
        },
        "/topic/game/player/healed": {
            "get": {
                "summary": "Notify when a player is healed",
                "responses": {
                    "default": {
                        "description": "The player and heal amount",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                }
            }
        },
        "/topic/game/player/states": {
            "get": {
                "summary": "Notify when any state applied to the player has been added or remove",
                "responses": {
                    "default": {
                        "description": "The player and the state changes",
                        "schema": {
                            "$ref": "#/definitions/PlayerStateUpdate"
                        }
                    }
                }
            }
        },
        "/topic/game/player/max": {
            "get": {
                "summary": "Notify the player his max life is updated",
                "responses": {
                    "default": {
                        "description": "The player and the amount",
                        "schema": {
                            "$ref": "#/definitions/PlayerLifeUpdate"
                        }
                    }
                }
            }
        },
        "/topic/game/player/move/up": {
            "post": {
                "summary": "Moves the current player one cell up. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [
                    {
                        "name": "",
                        "in": "body",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/topic/game/player/move/down": {
            "post": {
                "summary": "Moves the current player one cell down. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [
                    {
                        "name": "",
                        "in": "body",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/topic/game/player/move/left": {
            "post": {
                "summary": "Moves the current player one cell left. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [
                    {
                        "name": "",
                        "in": "body",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/topic/game/player/move/right": {
            "post": {
                "summary": "Moves the current player one cell right. If the player can't move, then the player position is not changed and no event will be triggered. If the player can move, then the event /topic/game/board/moved is triggered with player and position information",
                "parameters": [
                    {
                        "name": "",
                        "in": "body",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/topic/game/action": {
            "post": {
                "summary": "Execute an action. Please see specific actions to send: ChangePosition, ChangeStates, MoveImage, UpdateCurrentLife, UpdateMaxLife. If the action is ChangePosition, then the event /topic/game/board/moved is triggered with player and position information. If the action is ChangeStates, then the event /topic/game/player/states is triggered with player and the list of changes. If the action is MoveImage, then the event /topic/game/action/image/moved indicating the image that moved and the position before and after. If the action is UpdateCurrentLife or UpdateMaxLife, then one of the following events is triggered according to the life change: /topic/game/player/died, /topic/game/player/revived, /topic/game/player/hit, /topic/game/player/healed.",
                "parameters": [
                    {
                        "name": "action",
                        "in": "body",
                        "description": "Action",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Action"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/topic/game/action/image/moved": {
            "get": {
                "summary": "Notify when an image has moved",
                "responses": {
                    "default": {
                        "description": "The executed action. It contains the information about the image that has moved and where the image was before the move (start) and where the image is now (end)",
                        "schema": {
                            "$ref": "#/definitions/MoveImage"
                        }
                    }
                }
            }
        },
        "/topic/game/board/moved": {
            "get": {
                "summary": "Notify when a player has moved",
                "responses": {
                    "default": {
                        "description": "The player that moved, the position before the move (oldCell) and the current position (newCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                }
            }
        },
        "/topic/game/board/added": {
            "get": {
                "summary": "Notify when a player is added to the board",
                "responses": {
                    "default": {
                        "description": "The player that has joined the game and the position where he has been added (newCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                }
            }
        },
        "/topic/game/board/removed": {
            "get": {
                "summary": "Notify when a player is removed from board",
                "responses": {
                    "default": {
                        "description": "The player that has quitted the game and the position where he was (oldCell)",
                        "schema": {
                            "$ref": "#/definitions/PlayerMoved"
                        }
                    }
                }
            }
        },
        "/topic/game/message/error": {
            "get": {
                "summary": "Notify when an error occurs in the game. The error can contain developer information that is useful for identifying quickly who created the problem and therefore helps to locate the error",
                "responses": {
                    "default": {
                        "description": "The error (message, cause and eventually the developer)",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic/game/message": {
            "get": {
                "summary": "Notify when a message should be displayed on the client",
                "responses": {
                    "default": {
                        "description": "The message and the level",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    }
                }
            }
        },
        "/topic/game/player/join": {
            "post": {
                "summary": "Add a player to the game. If the player is already in the game, then an error is triggered on /queue/errors. If the game is full (too many players), then an error is also triggered on /queue/errors",
                "parameters": [
                    {
                        "name": "player",
                        "in": "body",
                        "description": "Information required to identify a player (name and avatar)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PlayerInfo"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/topic/game/player/quit": {
            "post": {
                "summary": "Remove the current player from the game. Once the player is removed, the event /topic/game/board/removed. If the player wasn't really in the game, then no event will be triggered",
                "parameters": [
                    {
                        "name": "",
                        "in": "body",
                        "description": "",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Cell": {
            "properties": {
                "x": {
                    "type": "integer",
                    "description": "The x position"
                },
                "y": {
                    "type": "integer",
                    "description": "The y position"
                }
            },
            "type": "object",
            "description": "A square on the board"
        },
        "Life": {
            "properties": {
                "current": {
                    "type": "integer"
                },
                "max": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PlayerInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique name of the player"
                },
                "avatar": {
                    "type": "string",
                    "description": "The name of a local image that will be displayed in the game for the player. Default value to 'default'"
                }
            },
            "type": "object"
        },
        "Player": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier representing a specific player"
                },
                "life": {
                    "$ref": "#/definitions/Life",
                    "description": "Life of the player."
                },
                "playerInfo": {
                    "$ref": "#/definitions/PlayerInfo",
                    "description": "Information about the player (name and avatar)"
                },
                "states": {
                    "type": "string",
                    "items": {
                        "type": "string"
                    },
                    "description": "States affecting the player."
                }
            },
            "type": "object"
        },
        "PlayerMoved": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The action emitter"
                },
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "A player moving event"
        },
        "PlayerLifeUpdate": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player who life changed"
                },
                "amount": {
                    "type": "integer",
                    "description": "The life amount (positive means player was healed, negative means the player was hit)"
                }
            },
            "type": "object",
            "description": "A player moving event"
        },
        "StateChange": {
            "properties": {
                "state": {
                    "type": "string",
                    "description": "The name of the state"
                },
                "change": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "ADD",
                            "REMOVE"
                        ]
                    },
                    "description": "The list of modifications applied to the player states"
                }
            },
            "type": "object",
            "description": "Player state changes response"
        },
        "PlayerStateUpdate": {
            "properties": {
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The player who states are changed"
                },
                "changes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StateChange"
                    },
                    "description": "The list of modifications applied to the player states"
                }
            },
            "type": "object",
            "description": "Player state changes response"
        },
        "MoveImage": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Image name to move"
                },
                "player": {
                    "$ref": "#/definitions/Player",
                    "description": "The action emitter"
                },
                "start": {
                    "$ref": "#/definitions/Cell",
                    "description": "The starting Cell"
                },
                "end": {
                    "$ref": "#/definitions/Cell",
                    "description": "The destination Cell"
                }
            },
            "type": "object",
            "description": "An image moving action"
        },
        "Action": {
            "description": "any of ChangePosition, MoveImage, UpdateLife, ChangeStates",
            "type": "object",
            "properties": {
                
            }
        },
        "Level": {
            "description": "one of DEBUG, INFO, WARNING",
            "type": "string",
            "properties": {
                
            },
            "enum": [
                "DEBUG",
                "INFO",
                "WARNING"
            ]
        },
        "Message": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "level": {
                    "$ref": "#/definitions/Level"
                }
            },
            "type": "object"
        },
        "Error": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "level": {
                    "$ref": "#/definitions/Level"
                }
            },
            "type": "object"
        }
    }
}